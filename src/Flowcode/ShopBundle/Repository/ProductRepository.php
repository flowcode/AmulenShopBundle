<?php

namespace Flowcode\ShopBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    public function findAllQB()
    {
        $qb = $this->createQueryBuilder('p');
        return $qb;
    }

    public function findAllFilteredQB($filter)
    {
        $qb = $this->findAllQB();
        $qb->leftJoin('p.category', 'c');


        if ($filter['q']) {
            $qb->andwhere('p.name LIKE :name')->setParameter('name', '%' . $filter['q'] . '%');
            $qb->orWhere('p.description LIKE :name')->setParameter('name', '%' . $filter['q'] . '%');
        }

        if ($filter['category']) {
            $qb->andWhere('c.id =:category_id')->setParameter('category_id', $filter['category']);
        }

        if ($filter['is_enabled']) {
            $qb->andWhere('p.enabled = :is_enabled')->setParameter('is_enabled', true);
        }

        $qb->addOrderBy("p.featured", "DESC");

        return $qb;
    }

    public function findEnabledByPageAndCategory($category_slug = null)
    {
        $query = null;
        if (!is_null($category_slug)) {
            $query = $this->createQueryBuilder("p")->innerJoin("p.category", "c", Join::WITH, "c.slug = :category_slug");
            $query->setParameter("category_slug", $category_slug);
        } else {
            $query = $this->createQueryBuilder("p");
        }
        $query->andWhere("p.enabled = 1");
        $query->addOrderBy("p.featured", "DESC");
        $query->addOrderBy("p.updated", "DESC");
        return $query;
    }
}
