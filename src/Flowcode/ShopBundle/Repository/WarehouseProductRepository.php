<?php

namespace Flowcode\ShopBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Flowcode\ShopBundle\Entity\WarehouseProduct;

/**
 * WarehouseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WarehouseProductRepository extends EntityRepository
{
    function getTotalCount(array $params = array())
    {
        $qb = $this->createQueryBuilder('pw');
        $qb->leftJoin('pw.product', 'p');
        $qb->leftJoin('pw.warehouse', 'w');
        $qb->select('COUNT(p)');
        $qb->where('p.enabled = :enabled')->setParameter('enabled', true);
        if (isset($params['is_rawmaterial'])) {
            $qb->andWhere('p.rawMaterial= :is_rawmaterial')->setParameter('is_rawmaterial', $params['is_rawmaterial']);
        }
        if (isset($params['warehouse_id'])) {
            $qb->andWhere('w.id = :warehouse_id')->setParameter('warehouse_id', $params['warehouse_id']);
        }
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getTotalCountWithouhStock(array $params = array())
    {
        $qb = $this->createQueryBuilder('pw');
        $qb->leftJoin('pw.product', 'p');
        $qb->select('COUNT(pw)');
        $qb->where('pw.stock <= 0');
        if (isset($params['is_rawmaterial'])) {
            $qb->andWhere('p.rawMaterial= :is_rawmaterial')->setParameter('is_rawmaterial', $params['is_rawmaterial']);
        }
        if (isset($params['warehouse_id'])) {
            $qb->andWhere('w.id = :warehouse_id')->setParameter('warehouse_id', $params['warehouse_id']);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function save(WarehouseProduct $product)
    {
        $this->_em->persist($product);
        $this->_em->flush();
    }

}
